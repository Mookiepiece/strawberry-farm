import chokidar from 'chokidar';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// UTILS

const remove = (arr, cb) => {
  const index = arr.findIndex(cb);
  if (index !== -1) {
    return [...arr.slice(0, index), ...arr.slice(index + 1, arr.length)];
  }
  return arr;
};
function debounce(fn, delay) {
  let timeoutID;
  return function (...args) {
    if (timeoutID) clearTimeout(timeoutID);
    timeoutID = setTimeout(() => {
      fn(...args);
    }, delay);
  };
}

const tpl = (p, fileNames) => `// auto generated by watchDemo.mjs, DO NOT EDIT this file
import React from 'react';
import PageWalker from '@docs/components/PageWalker';

const requireDemo = import.meta.globEager('/src/${p}/*.tsx');

${fileNames.map(n => `import ${n} from '@docs/${p}/${n}.tsx?raw';\n`).join('')}
const requireRaw = {
${fileNames.map(n => `  ${n},\n`).join('')}};

import zh from '@docs/${p}/index-zh.md?raw';
import en from '@docs/${p}/index-en.md?raw';
const requireMd = {
  zh,
  en,
};

const Page: React.FC = () => {
  return <PageWalker requireDemo={requireDemo} requireRaw={requireRaw} requireMd={requireMd} />;
};
export default Page;
`;

const diffFileOn = (pagesDirName, pageName, t) => {
  const pagePath = path.resolve(
    fileURLToPath(import.meta.url),
    '../../src/pages/' + pagesDirName,
    `${pageName}.tsx`
  );

  if (fs.existsSync(pagePath) ? fs.readFileSync(pagePath).toString() : '' !== t) {
    fs.writeFileSync(pagePath, t);
  }
};

const makeWatcher = (assertsPath, pagesDirPath) => {
  const sfAssetsPath = path.resolve(fileURLToPath(import.meta.url), '../../src/' + assertsPath);
  console.log(`🍺`, sfAssetsPath);

  const caches = new Map();
  chokidar.watch(sfAssetsPath).on('all', (event, p) => {
    const [pageName, _fileName] = path.relative(sfAssetsPath, p).split('\\');

    if (_fileName?.endsWith('.tsx')) {
      const fileName = _fileName.slice(0, -4);
      if (event === 'unlink') {
        caches.set(
          pageName,
          remove(caches.get(pageName), n => n === fileName)
        );
      } else if (event === 'add') {
        caches.set(pageName, [...(caches.get(pageName) || []), fileName]);
      }
    }
    cba();
  });
  const cb = pageName => {
    const fileNames = caches.get('pageName') || [];
    const t = tpl(assertsPath + '/' + pageName, fileNames);
    diffFileOn(pagesDirPath, pageName, t);
  };

  const cba = debounce(() => {
    [...caches.entries()].map(([pageName, fileNames]) => {
      const t = tpl(assertsPath + '/' + pageName, fileNames);
      diffFileOn(pagesDirPath, pageName, t);
    });
    console.log(`Updated! - ${assertsPath} - ${pagesDirPath}`);
  }, 2000);
};
makeWatcher('sf-assets', 'sf-components');
makeWatcher('st-assets', 'st-components');
