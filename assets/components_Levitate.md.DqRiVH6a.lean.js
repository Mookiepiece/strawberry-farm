import l from"./chunks/LevitateAlgo.BPmQyw1H.js";import{q as r,j as s,J as n,D as i,p as t,H as o,o as d}from"./chunks/framework.BjwmYqAO.js";const g=JSON.parse('{"title":"Levitate","description":"","frontmatter":{},"headers":[],"relativePath":"components/Levitate.md","filePath":"components/Levitate.md"}'),p={name:"components/Levitate.md"},b=Object.assign(p,{setup(h){return(m,e)=>{const a=r("VPDemo");return d(),s("div",null,[e[0]||(e[0]=n('<h1 id="levitate" tabindex="-1">Levitate <a class="header-anchor" href="#levitate" aria-label="Permalink to &quot;Levitate&quot;">​</a></h1><p>Positioning floating(fixed) elements.</p><p>Basic Arguments:</p><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Anchor</td><td>Reference Element</td></tr><tr><td>Pop</td><td>Floating Element</td></tr></tbody></table><p>Config Arguments</p><table tabindex="0"><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>Dir</td><td><code>top</code> <code>right</code> <code>bottom</code> <code>left</code></td></tr><tr><td>Align</td><td><code>start</code> <code>center</code>(default) <code>end</code></td></tr></tbody></table><p>Other words:</p><ul><li>View(viewport): The <strong>Viewport</strong> boundary that will be clipped into Map.</li><li>Map: The <strong>Clipped Viewport</strong> based on anchor&#39;s <code>getBoundingClientRect()</code>. which is almost the maximum size of the popper.</li></ul>',8)),i(l),e[1]||(e[1]=t("h2",{id:"positioning",tabindex:"-1"},[o("Positioning "),t("a",{class:"header-anchor",href:"#positioning","aria-label":'Permalink to "Positioning"'},"​")],-1)),e[2]||(e[2]=t("h3",{id:"mannual-positioning",tabindex:"-1"},[o("Mannual Positioning "),t("a",{class:"header-anchor",href:"#mannual-positioning","aria-label":'Permalink to "Mannual Positioning"'},"​")],-1)),i(a,{path:"components/LevitatePassive"}),e[3]||(e[3]=t("h3",{id:"auto-positioning",tabindex:"-1"},[o("Auto Positioning "),t("a",{class:"header-anchor",href:"#auto-positioning","aria-label":'Permalink to "Auto Positioning"'},"​")],-1)),e[4]||(e[4]=t("p",null,[t("code",null,"levitate.auto()"),o(" is built upon "),t("code",null,"ResizeObserver"),o(" and "),t("code",null,"onscroll"),o(".")],-1)),i(a,{path:"components/LevitateAuto"}),e[5]||(e[5]=t("h2",{id:"tooltip",tabindex:"-1"},[o("Tooltip "),t("a",{class:"header-anchor",href:"#tooltip","aria-label":'Permalink to "Tooltip"'},"​")],-1)),e[6]||(e[6]=t("p",null,"Learn how to conditional rendering.",-1)),e[7]||(e[7]=t("h3",{id:"tooltip-basics",tabindex:"-1"},[o("Tooltip Basics "),t("a",{class:"header-anchor",href:"#tooltip-basics","aria-label":'Permalink to "Tooltip Basics"'},"​")],-1)),i(a,{path:"components/LevitateVueSimple"}),e[8]||(e[8]=t("h3",{id:"tooltip-transition",tabindex:"-1"},[o("Tooltip Transition "),t("a",{class:"header-anchor",href:"#tooltip-transition","aria-label":'Permalink to "Tooltip Transition"'},"​")],-1)),i(a,{path:"components/LevitateVueTransition"}),e[9]||(e[9]=n('<h3 id="tooltip-trap" tabindex="-1">Tooltip Trap <a class="header-anchor" href="#tooltip-trap" aria-label="Permalink to &quot;Tooltip Trap&quot;">​</a></h3><p>Assign <code>[tabindex=&#39;-1&#39;]</code> and <code>@keydown.esc</code> and call <code>trap()</code> after the pop opened.</p><p>The keyboard focus is trapped inside.</p><p>Anchor is focusable to prevent the focus from bling bling when you click upon the anchor to close it, but it is not required. an alt way to do this is <code>onClickAway([$pop, $anc]); trap($pop, undefined)</code></p>',4)),i(a,{path:"components/LevitateVueTransitionTrap"}),e[10]||(e[10]=n('<h2 id="plugins" tabindex="-1">Plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;Plugins&quot;">​</a></h2><p>Learn advanced usage of customized positioning.</p><h3 id="applytransform" tabindex="-1">ApplyTransform <a class="header-anchor" href="#applytransform" aria-label="Permalink to &quot;ApplyTransform&quot;">​</a></h3><p>The <code>applyTransform</code> plugin will assign <code>top</code> <code>left</code> <code>max-width</code> <code>max-height</code> <code>[data-pop-dir=&quot;bottom&quot;]</code> etc to your elements.</p><p>It is a <code>post</code> plugin which will run after <code>Align</code>(positioning process).</p><p>Here&#39;s another example of mannually transform.</p>',6)),i(a,{path:"components/LevitatePluginsApplytransform"}),e[11]||(e[11]=t("h3",{id:"margin",tabindex:"-1"},[o("Margin "),t("a",{class:"header-anchor",href:"#margin","aria-label":'Permalink to "Margin"'},"​")],-1)),e[12]||(e[12]=t("p",null,"To make a gap, make the map smaller, The algo is shown at the top of this page.",-1)),e[13]||(e[13]=t("p",null,[t("code",null,"5px"),o(" is enough to use.")],-1)),i(a,{path:"components/LevitatePluginsMargin"}),e[14]||(e[14]=n('<h3 id="autoplacement-flip" tabindex="-1">AutoPlacement / Flip <a class="header-anchor" href="#autoplacement-flip" aria-label="Permalink to &quot;AutoPlacement / Flip&quot;">​</a></h3><p>If target direction&#39;s main axis length does not satisfies <code>limit</code>, try other directions which has more area <code>x * y</code>. <code>autoPlacement</code> will try all other directions while <code>flip</code> will only try the opposite direction.</p><p><code>limit</code> default to <code>pop.width (offsetWidth - clientWidth + scrollWidth)</code></p>',3)),i(a,{path:"components/LevitatePluginsFlip"}),e[15]||(e[15]=n('<h3 id="max-height" tabindex="-1">Max Height <a class="header-anchor" href="#max-height" aria-label="Permalink to &quot;Max Height&quot;">​</a></h3><p>Assign <code>max-width</code> / <code>max-height</code> with the map&#39;s dimension to keep the pop in view.</p><p>Place it after <code>autoPlacement</code> thus get the right map before align.</p><p>Useful on Select / Dropdown.</p><p>Because <code>max-width</code> / <code>max-height</code> property is used by this plugin, you&#39;ll have to assign your max size limit to it&#39;s inner children.</p><p>The following example shows <code>max-width</code> at initial 100 items. Input 1000 to see how both <code>max-width</code> / <code>max-height</code> take into effect.</p>',6)),i(a,{path:"components/LevitatePluginsMaxHeight"}),e[16]||(e[16]=t("p",null,[o("Note on using with "),t("code",null,"limit"),o(": Is there any situation where "),t("code",null,"scrollWidth"),o(" cannot repesents the actually maximum size (e.g. contains scrollable elements inside) so that you have to assign "),t("code",null,"limit"),o(" a "),t("code",null,"number"),o("? In the following example, adding more and more items will makes it's children scroll and overflow other than it self, so the limit never reach, only scale the browser window to make the map bottom minus "),t("code",null,"1px"),o(" will the pop flip.")],-1)),i(a,{path:"components/LevitatePluginsMaxHeightD"}),e[17]||(e[17]=t("h2",{id:"elite",tabindex:"-1"},[o("Elite "),t("a",{class:"header-anchor",href:"#elite","aria-label":'Permalink to "Elite"'},"​")],-1)),e[18]||(e[18]=t("p",null,"In the Elite section, you'll discover complex real-world usage, beyond its basic API References.",-1)),e[19]||(e[19]=t("h3",{id:"ctx-menu",tabindex:"-1"},[o("CTX MENU "),t("a",{class:"header-anchor",href:"#ctx-menu","aria-label":'Permalink to "CTX MENU"'},"​")],-1)),e[20]||(e[20]=t("ul",null,[t("li",null,"This example don't cover sub menu.")],-1)),i(a,{path:"components/LevitateEliteCtxMenu"})])}}});export{g as __pageData,b as default};
