import{D as r,R as t}from"./vendor.2a2b1e8b.js";import{B as e,M as n}from"./index.0c2517e7.js";import{P as o}from"./PageWalker.fa3bd3d3.js";const a={"/src/st-assets/Modal/basic.tsx":Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:()=>{const[o,a]=r.exports.useState(!1),[s,l]=r.exports.useState(!1);return t.createElement(t.Fragment,null,t.createElement(e,{primary:!0,onClick:()=>a(!0)},"打开对话框"),t.createElement(n,{title:"标题",visible:o,onClose:()=>a(!1)},"内容",t.createElement(e,{onClick:()=>l(!0)},"打开第二个")),t.createElement(n,{title:"标题",visible:s,onClose:()=>l(!1)},"第二个模态框"))}})},s={basic:"import React, { useState } from 'react';\r\nimport { Button, Modal } from 'starfall';\r\n\r\nconst BasicUsage: React.FC = () => {\r\n  const [state, setState] = useState(false);\r\n  const [state2, setState2] = useState(false);\r\n  return (\r\n    <>\r\n      <Button primary onClick={() => setState(true)}>\r\n        打开对话框\r\n      </Button>\r\n      <Modal title=\"标题\" visible={state} onClose={() => setState(false)}>\r\n        内容\r\n        <Button onClick={() => setState2(true)}>打开第二个</Button>\r\n      </Modal>\r\n      <Modal title=\"标题\" visible={state2} onClose={() => setState2(false)}>\r\n        第二个模态框\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\nexport default BasicUsage;\r\n"},l={zh:"## Modal 模态框\r\n\r\n### 基本用法\r\n\r\n::demo{basic}\r\n\r\n### 接口索引\r\n\r\n| Modal Static Property | Description                                              | Type                         |\r\n| --------------------- | -------------------------------------------------------- | ---------------------------- |\r\n| visible:required      |                                                          | `boolean`                    |\r\n| onClose               |                                                          | `string`                     |\r\n| title                 |                                                          | `string`                     |\r\n| closable              | 显示关闭按钮                                             | `boolean`                    |\r\n| maskClosable          | 点击背景可关闭                                           | `boolean`                    |\r\n| width                 |                                                          | ` string / number`           |\r\n| maxWidth              |                                                          | ` string / number`           |\r\n| mountOnEnter          |                                                          | `boolean`                    |\r\n| unmountOnExit         |                                                          | `boolean`                    |\r\n| onVisibilityChange    | visible 变化时执行，虽然外面也能获取到，但这里是声名式的 | `(visible: boolean) => void` |\r\n\r\n| Modal Static Property | Description                                                    | Type       |\r\n| --------------------- | -------------------------------------------------------------- | ---------- |\r\n| registry              | 当前打开的模态框 id 队列，先打开的在前                         | `number[]` |\r\n| mitt                  | 可以从此处执行`REMOTE_CLOSE`尝试执行一个模态框的`onClose` prop |            |\r\n\r\n### 可访问性\r\n\r\n可以支持浏览器回退和前进时先把已有的模态框关闭。步骤如下：\r\n\r\n在 App 下可设置一个`MyPrompt`管理整个应用的`Prompt`，使用`react-router-dom`时，可以使用其`history.block`接口，当使用浏览器回退和前进时界面若存在存在`Modal`，关闭`Modal`并返回 false 以阻止跳转。\r\n\r\n`StarwberryFury Doc`的`MyPrompt`在`App.tsx`底下。\r\n\r\n```ts\r\nconst history = useHistory();\r\nvoid 0;\r\nuseEffect(() => {\r\n  const unlock = history.block((props, action) => {\r\n    if (action === 'POP' && Modal.registry.length) {\r\n      Modal.Mitt.emit('REMOTE_CLOSE', Modal.registry.slice(-1)[0]);\r\n      return false;\r\n    }\r\n  });\r\n\r\n  return unlock;\r\n});\r\n```\r\n",en:"## Modal\r\n"};export default()=>t.createElement(o,{requireDemo:a,requireRaw:s,requireMd:l});
