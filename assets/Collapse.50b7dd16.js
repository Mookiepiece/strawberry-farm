import{D as e,R as t}from"./vendor.2a2b1e8b.js";import{B as i,C as r}from"./index.0c2517e7.js";import{P as n}from"./PageWalker.fa3bd3d3.js";const a={"/src/st-assets/Collapse/individual.tsx":Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",default:()=>{const[n,a]=e.exports.useState(!1),[o,l]=e.exports.useState(!1);return t.createElement(t.Fragment,null,t.createElement("div",null,n?"👴":"🎅"),t.createElement(i,{onClick:()=>a(!n)},"toggle"),t.createElement(r.Panel,{active:n},t.createElement("p",null,"Lorem ipsum dolor sit, amet consectetur adipisicing elit. Reiciendis unde nesciunt laudantium quidem sint, suscipit sit facere quos dolor. Iure omnis aspernatur magni laudantium rerum enim quam placeat libero voluptate."),t.createElement(i,{onClick:()=>a(!n)},"toggle"),t.createElement(i,{onClick:()=>l(!o)},"inner toggle2"),t.createElement(r.Panel,{active:o},t.createElement("p",null,"Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aspernatur libero facilis architecto? Sunt, delectus mollitia quaerat ad ut laboriosam enim quis perspiciatis culpa beatae! Veritatis odio consequuntur iure magnam esse!"),t.createElement("div",{style:{height:20,marginBottom:100,background:"aliceblue"}},t.createElement("div",{style:{height:10,marginBottom:-90,background:"pink"}}))),t.createElement("p",null,"Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aspernatur libero facilis architecto? Sunt, delectus mollitia quaerat ad ut laboriosam enim quis perspiciatis culpa beatae! Veritatis odio consequuntur iure magnam esse!")))}})},o={individual:"import React, { useState } from 'react';\r\nimport { Button, Collapse } from 'starfall';\r\n\r\nconst Individual: React.FC = () => {\r\n  const [active, setActive] = useState(false);\r\n  const [active2, setActive2] = useState(false);\r\n  return (\r\n    <>\r\n      <div>{active ? '👴' : '🎅'}</div>\r\n      <Button onClick={() => setActive(!active)}>toggle</Button>\r\n      <Collapse.Panel active={active}>\r\n        <p>\r\n          Lorem ipsum dolor sit, amet consectetur adipisicing elit. Reiciendis unde nesciunt\r\n          laudantium quidem sint, suscipit sit facere quos dolor. Iure omnis aspernatur magni\r\n          laudantium rerum enim quam placeat libero voluptate.\r\n        </p>\r\n        <Button onClick={() => setActive(!active)}>toggle</Button>\r\n        <Button onClick={() => setActive2(!active2)}>inner toggle2</Button>\r\n        <Collapse.Panel active={active2}>\r\n          <p>\r\n            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aspernatur libero facilis\r\n            architecto? Sunt, delectus mollitia quaerat ad ut laboriosam enim quis perspiciatis\r\n            culpa beatae! Veritatis odio consequuntur iure magnam esse!\r\n          </p>\r\n          <div style={{ height: 20, marginBottom: 100, background: 'aliceblue' }}>\r\n            <div style={{ height: 10, marginBottom: -90, background: 'pink' }}></div>\r\n          </div>\r\n        </Collapse.Panel>\r\n        <p>\r\n          Lorem, ipsum dolor sit amet consectetur adipisicing elit. Aspernatur libero facilis\r\n          architecto? Sunt, delectus mollitia quaerat ad ut laboriosam enim quis perspiciatis culpa\r\n          beatae! Veritatis odio consequuntur iure magnam esse!\r\n        </p>\r\n      </Collapse.Panel>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Individual;\r\n"},l={zh:"## Collapse 折叠面板\r\n\r\n:::demo{individual}\r\n\r\n### 独立面板\r\n\r\n只用 Panel 提供动画效果\r\n\r\n:::\r\n\r\n### 接口索引\r\n\r\n| Collapse.Panel Property | Description        | Type      |\r\n| ----------------------- | ------------------ | --------- |\r\n| active:required         | visibility control | `boolean` |\r\n\r\n\\*除上述属性，折叠面板仍继承原生 `<div>` 属性\r\n\r\n### 原理\r\n\r\n如果你的面板有设置`height`，那么传统的动画方案就能实现。但面板是没有自定义设置高度属性时默认是 `height:auto`，此时动画不生效，所以应提前一帧设置高度。\r\n\r\nBootstrap 和 W3Schools 使用了 `scrollHeight` ，它的值只和内部内容有关，内容不变它也保持不变。\r\n所以我们的折叠面板的最大值是固定的 `scrollHeight` ，最小值也是固定的 0。\r\n试想这种情况，折叠到一半突然点击反折，因为折叠到一半的时候 `clientHeight` 和 `offsetHeight` 都是当前值，而通过永远不变的 `scrollHeight` 可以知道最大值并且以此折返。\r\n\r\n哪怕子元素设置了`height:0`，`scrollHeight` 依旧会将子元素的实际高度纳入计算，\r\n以及可能会把子元素的下`margin`纳入计算导致出现一个`margin`距离的动画断层，\r\n解决方法是新建[块格式化上下文 👍](https://zhuanlan.zhihu.com/p/131402341)，给 panel 设置 `overflow:hidden` 就可以了\r\n\r\n注意：子元素存在负值的`margin`&`padding`会导致 `scrollHeight` 计算出错\r\n\r\n- [Bootstrap: collapse.js](https://github.com/twbs/bootstrap/blob/main/js/src/collapse.js#L202)\r\n- [W3schools: Collapse 👍](https://www.w3schools.com/howto/howto_js_collapsible.asp)\r\n\r\n额外的：另一个投机取巧的方法是设置 `max-height` 代替 `height`, 但是可以看到明显的延迟，因为 max-height 总是一个溢出的很高的值，降低到本体的高度还是需要时间的\r\n\r\n- [Toggle Collapse - Animate Height (pure JS) 👍](https://codepen.io/davidcochran/pen/RNOOEO)\r\n",en:"## Collapse\r\n"};export default()=>t.createElement(n,{requireDemo:a,requireRaw:o,requireMd:l});
